(****************************** 1 *********************************

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
assert sum = 233168
*******************************************************************)

fun sumOfMult35 x =
    let
        val mult35 = fn x => (x mod 3 = 0) orelse (x mod 5 = 0);
        fun theSum 0 sum = sum
          | theSum n sum = if mult35 n then theSum (n-1) (sum+n)
                           else theSum (n-1) sum
    in
        theSum x 0
    end;

sumOfMult35 999;


(****************************** 2 *********************************

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
assert sum = 4613732;
*******************************************************************)

fun sumFib n =
    let
        val isEven = fn x => x mod 2 = 0
        fun sumNext(prev, next, target, sum) =
            if prev >= target then sum
            else sumNext(
                    next,
                    prev+next,
                    target,
                    if isEven(prev) then sum+prev else sum)
    in
        sumNext(1, 2, n, 0)
    end;

sumFib 4000000;
